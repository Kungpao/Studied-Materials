
-------------------------------------------------#1-----------------------------------------------------

// Programm finding the average sum of every row in 5x5 matrix

#include "stdafx.h"
#include <iostream>
#include <locale.h>
#include <conio.h>
#include <time.h>
#include <stdlib.h>

int main()
{
	//for using kirilica in our programm
	setlocale(LC_ALL, "RUS");

	//for true random values generation
	srand(time(0));

	// for restarting program. appointing ESC as exit button to press
	int exit = 0;
	while (exit != 27)
	{
		// Size for our array
		const unsigned short int matrix_size = 5;

		//Declaring 2d array
		int **arr = (int**)malloc(matrix_size*sizeof(int*));

		// checking for memory error in malloc
		if (!arr)
		{
			std::cout << "Error **arr" << std::endl;
			getchar();
			return 0;
		}

		// setting memory for each pointer one by one
		for (size_t i = 0; i < matrix_size; i++)
		{
			arr[i] = (int*)malloc(matrix_size*sizeof(int));
			// checking for memory error in malloc
			if (!arr[i])
			{
				std::cout << "Error *arr" << std::endl;
				getchar();
				return 0;
			}
		}
		// storage for sum
		int sum = 0;
		
		// Loop for filling array with rnd values, counting sum by row, amd printing on console
		for (size_t i = 0; i < matrix_size; i++)
		{
			sum = 0;
			for (size_t j = 0; j < matrix_size; j++)
			{
				arr[i][j] = rand() % 10 + 1;
				std::cout << arr[i][j] << " ";
				sum += arr[i][j];
			}

			std::cout << "; avg = " << (double)(sum / (double)matrix_size) << std::endl;
		}
		
		//freeing memory for colums
		for (size_t i = 0; i < matrix_size; i++)
		{
			free(arr[i]);
		}
		//freeing memory for array and setting pointer to 0
		free(arr);
		arr = 0;
		printf("\n");


		//asking user wether he wants to restar or exit the program
		printf("\nPress any key to restart or ESC for exit:\n");
		exit = _getch();
		if (exit != 27)
			system("CLS");
	}
	return 0;
}

-------------------------------------------------#2-----------------------------------------------------

// find a maximum sum of values in a 5x5 matrix. by rows

#include "stdafx.h"
#include <iostream>
#include <locale.h>
#include <conio.h>
#include <time.h>
#include <stdlib.h>

int main()
{
	//for using kirilica in our programm
	setlocale(LC_ALL, "RUS");

	//for true random values generation
	srand(time(0));

	// for restarting program. appointing ESC as exit button to press
	int exit = 0;
	while (exit != 27)
	{
		// Size for our array	
		const unsigned short int MATRIX_SIZE = 5;

		int sum_max = 0, sum_max_index = 0;

		//Declaring a 2d array. using a malloc
		int **arr = (int**)malloc(MATRIX_SIZE*sizeof(int*));

		//Check for malloc error
		if (!arr)
		{
			std::cout << "Error **arr" << std::endl;
			getchar();
			return 0;
		}

		//Setting memory for a matrix cols
		for (size_t i = 0; i < MATRIX_SIZE; i++)
		{
			arr[i] = (int*)malloc(MATRIX_SIZE*sizeof(int));

			//Checking for malloc error
			if (!arr[i])
			{
				std::cout << "Error *arr" << std::endl;
				getchar();
				return 0;
			}

			//initializing values with 0
			memset(arr[i], 0, MATRIX_SIZE*sizeof(int));
		}

		// Temp storege for sum
		int sum_temp = 0;


		//Setting arr values to rnd values. printing. counting sum.
		for (size_t i = 0; i < MATRIX_SIZE; i++)
		{
			sum_temp = 0;
			for (size_t j = 0; j < MATRIX_SIZE; j++)
			{
				arr[i][j] = rand() % 10 + 1;
				std::cout << arr[i][j] << " ";
				sum_temp += arr[i][j];
			}
			std::cout << "; sum = " << sum_temp << "; avg = " << (double)(sum_temp / (double)MATRIX_SIZE) << std::endl;

			//Searching for sum_max
			if (sum_temp > sum_max)
			{
				sum_max = sum_temp;
				sum_max_index = i;
			}
		}

		// Showing the result
		std::cout << "\nThe string with a sum_max_index is = " << sum_max_index << std::endl;

		//freeing memory for arr cols after use
		for (size_t i = 0; i < MATRIX_SIZE; i++)
		{
			free(arr[i]);
		}

		// Freeing memory for arr and making it NULL value
		free(arr);
		arr = NULL;
		printf("\n");

		//asking user wether he wants to restar or exit the program
		printf("\nPress any key to restart or ESC for exit:\n");
		exit = _getch();
		if (exit != 27)
			system("CLS");
	}
	return 0;
}

-------------------------------------------------#3-----------------------------------------------------

#include "stdafx.h"
#include <locale.h>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>

// Global variables for using a 2d array as function parametr
const int G_SIZE = 3;
const int G_LENGTH = 20;

// Function prototypes
void SearchName(char[G_SIZE][G_LENGTH], const int*);
void SearchAge(char[G_SIZE][G_LENGTH], const int*);
void SortAges(char[G_SIZE][G_LENGTH], int*);


int main()
{
	setlocale(LC_ALL, "rus");

	//Making static arrays initialized with 0
	char Names[G_SIZE][G_LENGTH] = { 0 };
	int Ages[G_SIZE] = { 0 };

	printf("Please fill the array with names (%d) and respectful ages\n", G_SIZE);
	//Filling arrays from keyboard
	for (int i = 0; i < G_SIZE; i++)
	{
		printf("Enter The Name:\n");
		gets_s(Names[i], sizeof(Names[i]));
		printf("Enter The Ages:\n");

		//recieving as char array
		char age[10] = { 0 };
		gets_s(age, sizeof(age) - 1);

		//converting to int
		Ages[i] = atoi(age);

		//clearing the input stream
		fflush(stdin);
	}

	//Making an interface
	printf("1 - Search by Name\n2- Search by Age\n3- Sorting by Names\n");
	int vari = 0;

	/*scanf_s("%d", &vari); wasn't worked correctly*/
	/*fflush(stdin); didn't helped. Used C++ input with skip next symbol wich is '\n' */
	(std::cin >> vari).get();
	

	//switch (vari) start
	switch (vari)
	{
	case 1:
		SearchName(Names, Ages);
		break;
	case 2:
		SearchAge(Names, Ages);
		break;
	case 3:
		SortAges(Names, Ages);
		break;
	}
	//switch (vari) end
	return 0;
}

//body functions
void SearchName(char Names[G_SIZE][G_LENGTH], const int *pAges)
{
	printf("Please enter the name for Search:\n");
	/*char name[G_LENGTH] = { 0 };*/

	char name[G_LENGTH] = { 0 };
	gets_s(name, sizeof(name) - 1);

	for (int i = 0; i < G_SIZE; i++)
	{
		if (!strcmp(name, Names[i]))
		{
			printf("Name: %s, Age: %d\n", Names[i], pAges[i]);
			return;
		}
	}
	printf("There is no such person\n");
}
void SearchAge(char Names[G_SIZE][G_LENGTH], const int *pAges)
{
	printf("Please enter the Age:");
	int age = 0;
	scanf_s("%d", &age);
	for (int i = 0; i < G_SIZE; i++)
	{
		if (pAges[i] == age)
		{
			printf("Name: %s, Age: %d\n", Names[i], pAges[i]);
			return;
		}
	}
	printf("There is no such person\n");
}
void SortAges(char Names[G_SIZE][G_LENGTH], int *pAges)
{
	for (int i = 1; i < G_SIZE; i++)
	{
		for (int j = i; j > 0 && pAges[j - 1]>pAges[j]; j--)
		{
			char tmp[G_LENGTH] = { 20 };
			strcpy_s(tmp, sizeof(tmp) - 1, Names[j - 1]);
			int k = pAges[j - 1];
			strcpy_s(Names[j - 1], sizeof(Names[j - 1]), Names[j]);
			pAges[j - 1] = pAges[j];
			strcpy_s(Names[j], sizeof(Names[j]), tmp);
			pAges[j] = k;
		}
	}
	for (int i = 0; i < G_SIZE; i++)
		printf("%s,%d\n", Names[i], pAges[i]);
}

