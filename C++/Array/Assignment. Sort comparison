#include "stdafx.h"
#include <iostream>
#include <locale.h>
#include <conio.h>
#include <time.h>
#include <atltime.h>

/*
assignment:

Make a 3 array of unsigned int with size of 1000.
fill with random values.
save current time with time_t
sort the first array with a buble sort and show the time of sort as result
repeat 3,4,5 step with insertion and choice sort
*/


//Making functions for easy read programm

//function for filling array with a random numbers
void arr_random_fill(unsigned int *arr, const int size)
{
	for (size_t i = 0; i < size; i++)
	{
		arr[i] = rand() % 100 + 1;
	}
}

//function for copying array
void arr_copy(unsigned int *arr_1, unsigned *arr_2, const int size)
{
	for (size_t i = 0; i < size; i++)
	{
		arr_2[i] = arr_1[i];
	}
}

//function to show array on console. Divided by "=" symbol for easy reading
void arr_print(unsigned int *arr, const int size)
{

	std::cout << "==================================================" << std::endl;
	for (size_t i = 0; i < size; i++)
	{
		std::cout << arr[i] << " ";
	}
	std::cout << "\n==================================================" << std::endl;
}

//function to clean memory after using an array
void arr_delete(unsigned int *arr)
{
	delete[] arr;
}

//function for buble sort
void buble_sort(unsigned int *arr, int size)
{
	long long count = 0;
	bool is_replaced = false;
	for (size_t i = 0; i < size - 1; i++)
	{
		is_replaced = false;
		for (size_t j = 0; j < size - 1 - i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				unsigned int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
				count++;
				is_replaced = true;
			}
		}
		if (!is_replaced)
		{
			break;
		}

	}
	std::cout << "Buble_Sort Used '" << count << "' iterations" << std::endl;
}

//function for insertion sort 
void insertion_sort(unsigned int *arr, int size)
{
	long long count_2 = 0;
	for (size_t i = 1; i < size; i++)
	{

		for (size_t j = i; j >0 && arr[j - 1]>arr[j]; j--)
		{
			count_2++;
			int tmp = arr[j - 1];
			arr[j - 1] = arr[j];
			arr[j] = tmp;
		}
	}
	std::cout << "Insertion_Sort Used '" << count_2 << "' iterations" << std::endl;
}

//function for choice sort
void choice_sort(unsigned int *arr, int size)
{
	int count_3 = 0;
	for (size_t i = 0; i < size; i++)
	{
		unsigned int tmp = arr[i];
		for (size_t j = i + 1; j < size; j++)
		{
			if (arr[i] > arr[j])
			{
				count_3++;
				int tmp = arr[i];
				arr[i] = arr[j];
				arr[j] = tmp;
			}
		}
	}
	std::cout << "Choice_Sort Used '" << count_3 << "' iterations" << std::endl;
}

int main()
{
	// enabling random value generation
	srand(time(0));

	//choose a size. with 100000 -sorting time 45+ seconds
	const int size = 100000;

	//making 3 array
	unsigned int *arr_1 = new unsigned int[size];
	unsigned int *arr_2 = new unsigned int[size];
	unsigned int *arr_3 = new unsigned int[size];


	arr_random_fill(arr_1, size);
	arr_copy(arr_1, arr_2, size);
	arr_copy(arr_1, arr_3, size);

	//we can see them if needed. but it is not the point and will slow tje programm
	//arr_print(arr_1, size);
	//arr_print(arr_2, size);
	//arr_print(arr_3, size);

	//=========Sorting and timechecking ============
	//=========arr_1 start==========================

	clock_t t_start = clock();
	buble_sort(arr_1, size);
	clock_t t_end = clock();
	std::cout << "SortTime: " << double(t_end - t_start) / CLOCKS_PER_SEC << std::endl;
	//=========arr_1 end============================

	//=========arr_2 start==========================
	t_start = t_end = 0;
	t_start = clock();
	insertion_sort(arr_2, size);
	t_end = clock();
	std::cout << "SortTime: " << double(t_end - t_start) / CLOCKS_PER_SEC << std::endl;
	//==========arr_2 end==========================

	//=========arr_3 start=========================
	t_start = t_end = 0;
	t_start = clock();
	time_t t_start1 = time(0);
	choice_sort(arr_3, size);
	time_t t_end1 = time(0);
	t_end = clock();
	std::cout << "SortTime: " << double(t_end - t_start) / CLOCKS_PER_SEC << "miliseconds" << std::endl;
	std::cout << "SortTime: " << t_end1 - t_start1 << "seconds" << std::endl;

	//=========arr_3 end===========================

	//We can see here a sorted arrays.
	//arr_print(arr_1, size);
	//arr_print(arr_2, size);
	//arr_print(arr_3, size);

	//clearing a memory
	arr_delete(arr_1);
	arr_delete(arr_2);
	arr_delete(arr_3);

	//making a pause call just in case
	system("pause");
	return 0;
}
